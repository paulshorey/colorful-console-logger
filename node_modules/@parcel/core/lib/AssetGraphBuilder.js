"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _events() {
  const data = _interopRequireDefault(require("events"));

  _events = function () {
    return data;
  };

  return data;
}

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _diagnostic() {
  const data = _interopRequireDefault(require("@parcel/diagnostic"));

  _diagnostic = function () {
    return data;
  };

  return data;
}

function _AssetGraph() {
  const data = _interopRequireDefault(require("./AssetGraph"));

  _AssetGraph = function () {
    return data;
  };

  return data;
}

function _RequestTracker() {
  const data = _interopRequireWildcard(require("./RequestTracker"));

  _RequestTracker = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("./constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _ParcelConfig() {
  const data = _interopRequireDefault(require("./ParcelConfig"));

  _ParcelConfig = function () {
    return data;
  };

  return data;
}

function _ParcelConfigRequest() {
  const data = _interopRequireDefault(require("./requests/ParcelConfigRequest"));

  _ParcelConfigRequest = function () {
    return data;
  };

  return data;
}

function _EntryRequest() {
  const data = _interopRequireDefault(require("./requests/EntryRequest"));

  _EntryRequest = function () {
    return data;
  };

  return data;
}

function _TargetRequest() {
  const data = _interopRequireDefault(require("./requests/TargetRequest"));

  _TargetRequest = function () {
    return data;
  };

  return data;
}

function _AssetRequest() {
  const data = _interopRequireDefault(require("./requests/AssetRequest"));

  _AssetRequest = function () {
    return data;
  };

  return data;
}

function _PathRequest() {
  const data = _interopRequireDefault(require("./requests/PathRequest"));

  _PathRequest = function () {
    return data;
  };

  return data;
}

function _Validation() {
  const data = _interopRequireDefault(require("./Validation"));

  _Validation = function () {
    return data;
  };

  return data;
}

function _ReporterRunner() {
  const data = require("./ReporterRunner");

  _ReporterRunner = function () {
    return data;
  };

  return data;
}

function _dumpGraphToGraphViz() {
  const data = _interopRequireDefault(require("./dumpGraphToGraphViz"));

  _dumpGraphToGraphViz = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const typesWithRequests = new Set(['entry_specifier', 'entry_file', 'dependency', 'asset_group']);

class AssetGraphBuilder extends _events().default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "assetGraph", void 0);

    _defineProperty(this, "requestGraph", void 0);

    _defineProperty(this, "requestTracker", void 0);

    _defineProperty(this, "assetRequests", void 0);

    _defineProperty(this, "runValidate", void 0);

    _defineProperty(this, "queue", void 0);

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "changedAssets", new Map());

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "optionsRef", void 0);

    _defineProperty(this, "workerFarm", void 0);

    _defineProperty(this, "cacheKey", void 0);

    _defineProperty(this, "entries", void 0);

    _defineProperty(this, "initialAssetGroups", void 0);

    _defineProperty(this, "handle", void 0);
  }

  async init({
    options,
    optionsRef,
    entries,
    name,
    assetGroups,
    workerFarm
  }) {
    this.name = name;
    this.options = options;
    this.optionsRef = optionsRef;
    this.entries = entries;
    this.initialAssetGroups = assetGroups;
    this.workerFarm = workerFarm;
    this.assetRequests = [];
    this.cacheKey = (0, _utils().md5FromObject)({
      parcelVersion: _constants().PARCEL_VERSION,
      name,
      entries
    });
    this.queue = new (_utils().PromiseQueue)();
    this.runValidate = workerFarm.createHandle('runValidate');
    let changes = await this.readFromCache();

    if (!changes) {
      this.assetGraph = new (_AssetGraph().default)();
      this.requestGraph = new (_RequestTracker().RequestGraph)();
    }

    this.assetGraph.initOptions({
      onNodeRemoved: node => this.handleNodeRemovedFromAssetGraph(node)
    });
    this.requestTracker = new (_RequestTracker().default)({
      graph: this.requestGraph,
      farm: workerFarm,
      options: this.options
    });

    if (changes) {
      this.requestGraph.invalidateUnpredictableNodes();
      this.requestGraph.invalidateEnvNodes(options.env);
      this.requestGraph.invalidateOptionNodes(options);
      this.requestTracker.respondToFSEvents(changes);
    } else {
      this.assetGraph.initialize({
        entries,
        assetGroups
      });
    }
  }

  async build(signal) {
    this.requestTracker.setSignal(signal);
    let errors = [];
    let root = this.assetGraph.getRootNode();

    if (!root) {
      throw new Error('A root node is required to traverse');
    }

    let visited = new Set([root.id]);

    const visit = node => {
      if (errors.length > 0) {
        return;
      }

      if (this.shouldSkipRequest(node)) {
        visitChildren(node);
      } else {
        this.queueCorrespondingRequest(node).then(() => visitChildren(node), error => errors.push(error));
      }
    };

    const visitChildren = node => {
      for (let child of this.assetGraph.getNodesConnectedFrom(node)) {
        if ((!visited.has(child.id) || child.hasDeferred) && this.assetGraph.shouldVisitChild(node, child)) {
          visited.add(child.id);
          visit(child);
        }
      }
    };

    visit(root);
    await this.queue.run();

    if (errors.length) {
      throw errors[0]; // TODO: eventually support multiple errors since requests could reject in parallel
    } // Skip symbol propagation if no target is using scope hoisting
    // (mainly for faster development builds)


    let entryDependencies = (0, _utils().flatMap)((0, _utils().flatMap)(this.assetGraph.getNodesConnectedFrom(root), entrySpecifier => this.assetGraph.getNodesConnectedFrom(entrySpecifier)), entryFile => this.assetGraph.getNodesConnectedFrom(entryFile).map(dep => {
      (0, _assert().default)(dep.type === 'dependency');
      return dep;
    }));

    if (entryDependencies.some(d => d.value.env.scopeHoist)) {
      this.propagateSymbols();
    }

    (0, _dumpGraphToGraphViz().default)(this.assetGraph, this.name); // $FlowFixMe Added in Flow 0.121.0 upgrade in #4381

    (0, _dumpGraphToGraphViz().default)(this.requestGraph, 'RequestGraph');
    let changedAssets = this.changedAssets;
    this.changedAssets = new Map();
    return {
      assetGraph: this.assetGraph,
      changedAssets: changedAssets
    };
  }

  propagateSymbols() {
    // Propagate the requested symbols down from the root to the leaves
    this.propagateSymbolsDown((assetNode, incomingDeps, outgoingDeps) => {
      if (!assetNode.value.symbols) return; // exportSymbol -> identifier

      let assetSymbols = assetNode.value.symbols; // identifier -> exportSymbol

      let assetSymbolsInverse = new Map();

      for (let [s, {
        local
      }] of assetSymbols) {
        let set = assetSymbolsInverse.get(local);

        if (!set) {
          set = new Set();
          assetSymbolsInverse.set(local, set);
        }

        set.add(s);
      }

      let hasNamespaceOutgoingDeps = outgoingDeps.some(d => {
        var _d$value$symbols, _d$value$symbols$get;

        return ((_d$value$symbols = d.value.symbols) === null || _d$value$symbols === void 0 ? void 0 : (_d$value$symbols$get = _d$value$symbols.get('*')) === null || _d$value$symbols$get === void 0 ? void 0 : _d$value$symbols$get.local) === '*';
      }); // 1) Determine what the incomingDeps requests from the asset
      // ----------------------------------------------------------

      let isEntry = false; // Used symbols that are exported or reexported (symbol will be removed again later) by asset.

      assetNode.usedSymbols = new Set(); // Symbols that have to be namespace reexported by outgoingDeps.

      let namespaceReexportedSymbols = new Set();

      if (incomingDeps.length === 0) {
        // Root in the runtimes Graph
        assetNode.usedSymbols.add('*');
        namespaceReexportedSymbols.add('*');
      } else {
        for (let incomingDep of incomingDeps) {
          if (incomingDep.value.symbols == null) {
            isEntry = true;
            continue;
          }

          for (let exportSymbol of incomingDep.usedSymbolsDown) {
            if (exportSymbol === '*') {
              assetNode.usedSymbols.add('*');
              namespaceReexportedSymbols.add('*');
            }

            if (!assetSymbols || assetSymbols.has(exportSymbol) || assetSymbols.has('*')) {
              // An own symbol or a non-namespace reexport
              assetNode.usedSymbols.add(exportSymbol);
            } // A namespace reexport
            // (but only if we actually have namespace-exporting outgoing dependencies,
            // This usually happens with a reexporting asset with many namespace exports which means that
            // we cannot match up the correct asset with the used symbol at this level.)
            else if (hasNamespaceOutgoingDeps && exportSymbol !== 'default') {
                namespaceReexportedSymbols.add(exportSymbol);
              }
          }
        }
      } // 2) Distribute the symbols to the outgoing dependencies
      // ----------------------------------------------------------


      for (let dep of outgoingDeps) {
        let depUsedSymbolsDownOld = dep.usedSymbolsDown;
        let depUsedSymbolsDown = new Set();
        dep.usedSymbolsDown = depUsedSymbolsDown;

        if (assetNode.value.sideEffects || // For entries, we still need to add dep.value.symbols of the entry (which are "used" but not according to the symbols data)
        isEntry || // If not a single asset is used, we can say the entire subgraph is not used.
        // This is e.g. needed when some symbol is imported and then used for a export which isn't used (= "semi-weak" reexport)
        //    index.js:     `import {bar} from "./lib"; ...`
        //    lib/index.js: `export * from "./foo.js"; export * from "./bar.js";`
        //    lib/foo.js:   `import { data } from "./bar.js"; export const foo = data + " esm2";`
        assetNode.usedSymbols.size > 0 || namespaceReexportedSymbols.size > 0) {
          var _depSymbols$get;

          let depSymbols = dep.value.symbols;
          if (!depSymbols) continue;

          if (((_depSymbols$get = depSymbols.get('*')) === null || _depSymbols$get === void 0 ? void 0 : _depSymbols$get.local) === '*') {
            for (let s of namespaceReexportedSymbols) {
              // We need to propagate the namespaceReexportedSymbols to all namespace dependencies (= even wrong ones because we don't know yet)
              depUsedSymbolsDown.add(s);
            }
          }

          for (let [symbol, {
            local
          }] of depSymbols) {
            var _depSymbols$get2;

            // Was already handled above
            if (local === '*') continue;

            if (!assetSymbolsInverse || !((_depSymbols$get2 = depSymbols.get(symbol)) === null || _depSymbols$get2 === void 0 ? void 0 : _depSymbols$get2.isWeak)) {
              // Bailout or non-weak symbol (= used in the asset itself = not a reexport)
              depUsedSymbolsDown.add(symbol);
            } else {
              let reexportedExportSymbols = assetSymbolsInverse.get(local);

              if (reexportedExportSymbols == null) {
                // not reexported = used in asset itself
                depUsedSymbolsDown.add(symbol);
              } else if (assetNode.usedSymbols.has('*')) {
                // we need everything
                depUsedSymbolsDown.add(symbol);
                [...reexportedExportSymbols].forEach(s => assetNode.usedSymbols.delete(s));
              } else {
                let usedReexportedExportSymbols = [...reexportedExportSymbols].filter(s => assetNode.usedSymbols.has(s));

                if (usedReexportedExportSymbols.length > 0) {
                  // The symbol is indeed a reexport, so it's not used from the asset itself
                  depUsedSymbolsDown.add(symbol);
                  usedReexportedExportSymbols.forEach(s => assetNode.usedSymbols.delete(s));
                }
              }
            }
          }
        } else {
          depUsedSymbolsDown.clear();
        }

        if (!equalSet(depUsedSymbolsDownOld, depUsedSymbolsDown)) {
          dep.usedSymbolsDownDirty = true;
          dep.usedSymbolsUpDirtyDown = true;
        }
      }
    }); // Because namespace reexports introduce ambiguity, go up the graph from the leaves to the
    // root and remove requested symbols that aren't actually exported

    this.propagateSymbolsUp((assetNode, incomingDeps, outgoingDeps) => {
      if (!assetNode.value.symbols) return [];
      let assetSymbols = assetNode.value.symbols;
      let assetSymbolsInverse = new Map();

      for (let [s, {
        local
      }] of assetSymbols) {
        let set = assetSymbolsInverse.get(local);

        if (!set) {
          set = new Set();
          assetSymbolsInverse.set(local, set);
        }

        set.add(s);
      }

      let reexportedSymbols = new Set();

      for (let outgoingDep of outgoingDeps) {
        var _outgoingDepSymbols$g;

        let outgoingDepSymbols = outgoingDep.value.symbols;
        if (!outgoingDepSymbols) continue; // excluded, assume everything that is requested exists

        if (this.assetGraph.getNodesConnectedFrom(outgoingDep).length === 0) {
          outgoingDep.usedSymbolsDown.forEach(s => outgoingDep.usedSymbolsUp.add(s));
        }

        if (((_outgoingDepSymbols$g = outgoingDepSymbols.get('*')) === null || _outgoingDepSymbols$g === void 0 ? void 0 : _outgoingDepSymbols$g.local) === '*') {
          outgoingDep.usedSymbolsUp.forEach(s => reexportedSymbols.add(s));
        }

        for (let s of outgoingDep.usedSymbolsUp) {
          var _outgoingDepSymbols$g2;

          if (!outgoingDep.usedSymbolsDown.has(s)) {
            // usedSymbolsDown is a superset of usedSymbolsUp
            continue;
          }

          let local = (_outgoingDepSymbols$g2 = outgoingDepSymbols.get(s)) === null || _outgoingDepSymbols$g2 === void 0 ? void 0 : _outgoingDepSymbols$g2.local;

          if (local == null) {
            // Caused by '*' => '*', already handled
            continue;
          }

          let reexported = assetSymbolsInverse.get(local);

          if (reexported != null) {
            reexported.forEach(s => reexportedSymbols.add(s));
          }
        }
      }

      let errors = [];

      for (let incomingDep of incomingDeps) {
        var _incomingDepSymbols$g;

        let incomingDepUsedSymbolsUpOld = incomingDep.usedSymbolsUp;
        incomingDep.usedSymbolsUp = new Set();
        let incomingDepSymbols = incomingDep.value.symbols;
        if (!incomingDepSymbols) continue;
        let hasNamespaceReexport = ((_incomingDepSymbols$g = incomingDepSymbols.get('*')) === null || _incomingDepSymbols$g === void 0 ? void 0 : _incomingDepSymbols$g.local) === '*';

        for (let s of incomingDep.usedSymbolsDown) {
          if (assetNode.usedSymbols.has(s) || reexportedSymbols.has(s) || s === '*') {
            incomingDep.usedSymbolsUp.add(s);
          } else if (!hasNamespaceReexport) {
            var _incomingDep$value$sy, _incomingDep$value$sy2;

            let loc = (_incomingDep$value$sy = incomingDep.value.symbols) === null || _incomingDep$value$sy === void 0 ? void 0 : (_incomingDep$value$sy2 = _incomingDep$value$sy.get(s)) === null || _incomingDep$value$sy2 === void 0 ? void 0 : _incomingDep$value$sy2.loc;
            let [resolution] = this.assetGraph.getNodesConnectedFrom(incomingDep);
            (0, _assert().default)(resolution && resolution.type === 'asset_group');
            errors.push({
              message: `${(0, _utils().escapeMarkdown)(_path().default.relative(this.options.projectRoot, resolution.value.filePath))} does not export '${s}'`,
              origin: '@parcel/core',
              filePath: loc === null || loc === void 0 ? void 0 : loc.filePath,
              language: assetNode.value.type,
              codeFrame: loc ? {
                codeHighlights: [{
                  start: loc.start,
                  end: loc.end
                }]
              } : undefined
            });
          }
        }

        if (!equalSet(incomingDepUsedSymbolsUpOld, incomingDep.usedSymbolsUp)) {
          incomingDep.usedSymbolsUpDirtyUp = true;
        }

        incomingDep.excluded = false;

        if (incomingDep.value.symbols != null && incomingDep.usedSymbolsUp.size === 0) {
          let assetGroups = this.assetGraph.getNodesConnectedFrom(incomingDep);

          if (assetGroups.length === 1) {
            let [assetGroup] = assetGroups;
            (0, _assert().default)(assetGroup.type === 'asset_group');

            if (assetGroup.value.sideEffects === false) {
              incomingDep.excluded = true;
            }
          } else {
            (0, _assert().default)(assetGroups.length === 0);
          }
        }
      }

      return errors;
    });
  }

  propagateSymbolsDown(visit) {
    let root = this.assetGraph.getRootNode();

    if (!root) {
      throw new Error('A root node is required to traverse');
    }

    let queue = [root];
    let visited = new Set();

    while (queue.length > 0) {
      let node = queue.shift();
      let outgoing = this.assetGraph.getNodesConnectedFrom(node);
      let wasNodeDirty = false;

      if (node.type === 'dependency' || node.type === 'asset_group') {
        wasNodeDirty = node.usedSymbolsDownDirty;
        node.usedSymbolsDownDirty = false;
      } else if (node.type === 'asset' && node.usedSymbolsDownDirty) {
        visit(node, this.assetGraph.getIncomingDependencies(node.value).map(d => {
          let dep = this.assetGraph.getNode(d.id);
          (0, _assert().default)(dep && dep.type === 'dependency');
          return dep;
        }), outgoing.map(dep => {
          (0, _assert().default)(dep.type === 'dependency');
          return dep;
        }));
        node.usedSymbolsDownDirty = false;
      }

      visited.add(node);

      for (let child of outgoing) {
        let childDirty = false;

        if ((child.type === 'asset' || child.type === 'asset_group') && wasNodeDirty) {
          child.usedSymbolsDownDirty = true;
          childDirty = true;
        } else if (child.type === 'dependency') {
          childDirty = child.usedSymbolsDownDirty;
        }

        if (!visited.has(child) || childDirty) {
          queue.push(child);
        }
      }
    }
  }

  propagateSymbolsUp(visit) {
    let root = this.assetGraph.getRootNode();

    if (!root) {
      throw new Error('A root node is required to traverse');
    }

    let errors = new Map();
    let dirtyDeps = new Set();
    let visited = new Set([root.id]); // post-order dfs

    const walk = node => {
      let outgoing = this.assetGraph.getNodesConnectedFrom(node);

      for (let child of outgoing) {
        if (!visited.has(child.id)) {
          visited.add(child.id);
          walk(child);

          if (node.type === 'asset') {
            (0, _assert().default)(child.type === 'dependency');

            if (child.usedSymbolsUpDirtyUp) {
              node.usedSymbolsUpDirty = true;
              child.usedSymbolsUpDirtyUp = false;
            }
          }
        }
      }

      if (node.type === 'asset') {
        let incoming = this.assetGraph.getIncomingDependencies(node.value).map(d => {
          let n = this.assetGraph.getNode(d.id);
          (0, _assert().default)(n && n.type === 'dependency');
          return n;
        });

        for (let dep of incoming) {
          if (dep.usedSymbolsUpDirtyDown) {
            dep.usedSymbolsUpDirtyDown = false;
            node.usedSymbolsUpDirty = true;
          }
        }

        if (node.usedSymbolsUpDirty) {
          node.usedSymbolsUpDirty = false;
          let e = visit(node, incoming, outgoing.map(dep => {
            (0, _assert().default)(dep.type === 'dependency');
            return dep;
          }));

          if (e.length > 0) {
            errors.set(node, e);
          } else {
            errors.delete(node);
          }
        }
      } else if (node.type === 'dependency') {
        if (node.usedSymbolsUpDirtyUp) {
          dirtyDeps.add(node);
        } else {
          dirtyDeps.delete(node);
        }
      }
    };

    walk(root); // traverse circular dependencies if neccessary (anchestors of `dirtyDeps`)

    visited = new Set();
    let queue = [...dirtyDeps];

    while (queue.length > 0) {
      let node = queue.shift();
      visited.add(node);

      if (node.type === 'asset') {
        let incoming = this.assetGraph.getIncomingDependencies(node.value).map(d => {
          let n = this.assetGraph.getNode(d.id);
          (0, _assert().default)(n && n.type === 'dependency');
          return n;
        });
        let outgoing = this.assetGraph.getNodesConnectedFrom(node).map(dep => {
          (0, _assert().default)(dep.type === 'dependency');
          return dep;
        });

        for (let dep of outgoing) {
          if (dep.usedSymbolsUpDirtyUp) {
            node.usedSymbolsUpDirty = true;
            dep.usedSymbolsUpDirtyUp = false;
          }
        }

        if (node.usedSymbolsUpDirty) {
          let e = visit(node, incoming, outgoing);

          if (e.length > 0) {
            errors.set(node, e);
          } else {
            errors.delete(node);
          }
        }

        for (let i of incoming) {
          if (i.usedSymbolsUpDirtyUp) {
            queue.push(i);
          }
        }
      } else {
        queue.push(...this.assetGraph.getNodesConnectedTo(node));
      }
    } // Just throw the first error. Since errors can bubble (e.g. reexporting a reexported symbol also fails),
    // determining which failing export is the root cause is nontrivial (because of circular dependencies).


    if (errors.size > 0) {
      throw new (_diagnostic().default)({
        diagnostic: [...errors.values()][0]
      });
    }
  } // TODO: turn validation into a request


  async validate() {
    let {
      config: processedConfig,
      cachePath
    } = (0, _nullthrows().default)(await this.requestTracker.runRequest((0, _ParcelConfigRequest().default)()));
    let config = new (_ParcelConfig().default)(processedConfig, this.options.packageManager, this.options.inputFS, this.options.autoinstall);
    let trackedRequestsDesc = this.assetRequests.filter(request => {
      return config.getValidatorNames(request.filePath).length > 0;
    }); // Schedule validations on workers for all plugins that implement the one-asset-at-a-time "validate" method.

    let promises = trackedRequestsDesc.map(request => this.runValidate({
      requests: [request],
      optionsRef: this.optionsRef,
      configCachePath: cachePath
    })); // Skip sending validation requests if no validators were configured

    if (trackedRequestsDesc.length === 0) {
      return;
    } // Schedule validations on the main thread for all validation plugins that implement "validateAll".


    promises.push(new (_Validation().default)({
      requests: trackedRequestsDesc,
      options: this.options,
      config,
      report: _ReporterRunner().report,
      dedicatedThread: true
    }).run());
    this.assetRequests = [];
    await Promise.all(promises);
  }

  shouldSkipRequest(node) {
    return node.complete === true || !typesWithRequests.has(node.type) || node.correspondingRequest != null && this.requestGraph.getNode(node.correspondingRequest) != null && this.requestTracker.hasValidResult(node.correspondingRequest);
  }

  queueCorrespondingRequest(node) {
    switch (node.type) {
      case 'entry_specifier':
        return this.queue.add(() => this.runEntryRequest(node.value));

      case 'entry_file':
        return this.queue.add(() => this.runTargetRequest(node.value));

      case 'dependency':
        return this.queue.add(() => this.runPathRequest(node.value));

      case 'asset_group':
        return this.queue.add(() => this.runAssetRequest(node.value));

      default:
        throw new Error(`Can not queue corresponding request of node with type ${node.type}`);
    }
  }

  async runEntryRequest(input) {
    let request = (0, _EntryRequest().default)(input);
    let result = await this.requestTracker.runRequest(request);
    this.assetGraph.resolveEntry(request.input, result.entries, request.id);
  }

  async runTargetRequest(input) {
    let request = (0, _TargetRequest().default)(input);
    let targets = await this.requestTracker.runRequest(request);
    this.assetGraph.resolveTargets(request.input, targets, request.id);
  }

  async runPathRequest(input) {
    let request = (0, _PathRequest().default)(input);
    let result = await this.requestTracker.runRequest(request);
    this.assetGraph.resolveDependency(input, result, request.id);
  }

  async runAssetRequest(input) {
    this.assetRequests.push(input);
    let request = (0, _AssetRequest().default)({ ...input,
      optionsRef: this.optionsRef
    });
    let assets = await this.requestTracker.runRequest(request);

    if (assets != null) {
      for (let asset of assets) {
        this.changedAssets.set(asset.id, asset);
      }

      this.assetGraph.resolveAssetGroup(input, assets, request.id);
    }
  }

  handleNodeRemovedFromAssetGraph(node) {
    if (node.correspondingRequest != null) {
      this.requestTracker.removeRequest(node.correspondingRequest);
    }
  }

  respondToFSEvents(events) {
    return this.requestGraph.respondToFSEvents(events);
  }

  getWatcherOptions() {
    let vcsDirs = ['.git', '.hg'].map(dir => _path().default.join(this.options.projectRoot, dir));
    let ignore = [this.options.cacheDir, ...vcsDirs];
    return {
      ignore
    };
  }

  getCacheKeys() {
    let assetGraphKey = (0, _utils().md5FromString)(`${this.cacheKey}:assetGraph`);
    let requestGraphKey = (0, _utils().md5FromString)(`${this.cacheKey}:requestGraph`);
    let snapshotKey = (0, _utils().md5FromString)(`${this.cacheKey}:snapshot`);
    return {
      assetGraphKey,
      requestGraphKey,
      snapshotKey
    };
  }

  async readFromCache() {
    if (this.options.disableCache) {
      return null;
    }

    let {
      assetGraphKey,
      requestGraphKey,
      snapshotKey
    } = this.getCacheKeys();
    let assetGraph = await this.options.cache.get(assetGraphKey);
    let requestGraph = await this.options.cache.get(requestGraphKey);

    if (assetGraph && requestGraph) {
      this.assetGraph = assetGraph;
      this.requestGraph = requestGraph;
      let opts = this.getWatcherOptions();

      let snapshotPath = this.options.cache._getCachePath(snapshotKey, '.txt');

      return this.options.inputFS.getEventsSince(this.options.projectRoot, snapshotPath, opts);
    }

    return null;
  }

  async writeToCache() {
    if (this.options.disableCache) {
      return;
    }

    let {
      assetGraphKey,
      requestGraphKey,
      snapshotKey
    } = this.getCacheKeys();
    await this.options.cache.set(assetGraphKey, this.assetGraph);
    await this.options.cache.set(requestGraphKey, this.requestGraph);
    let opts = this.getWatcherOptions();

    let snapshotPath = this.options.cache._getCachePath(snapshotKey, '.txt');

    await this.options.inputFS.writeSnapshot(this.options.projectRoot, snapshotPath, opts);
  }

}

exports.default = AssetGraphBuilder;

function equalSet(a, b) {
  return a.size === b.size && [...a].every(i => b.has(i));
}